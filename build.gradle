/**───────────────────────────────────────────────────────────────────────────────────**/
buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
/**───────────────────────────────────────────────────────────────────────────────────**/
apply plugin: 'net.minecraftforge.gradle.forge'

sourceCompatibility = targetCompatibility = '1.8'
compileJava { sourceCompatibility = targetCompatibility = '1.8' }

version = getMajorMcVersion() + "-" + getModVersion('MOD_VERSION')
group = "terrails.orecontroller"
archivesBaseName = "Ore-Controller"

minecraft {
    version = MC_VERSION + "-" + FORGE_VERSION
    mappings = MCP_MAPPINGS
    runDir = "run"
}

repositories {
    mavenLocal()
}
dependencies {
    compile 'terrails:TerraCore:1.12.2-2.1.1'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

@SuppressWarnings("GroovyMissingReturnStatement")
String getMajorMcVersion() {
    String release = "0"
    String major = "0"
    File file = file("gradle.properties")
    file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith("MC_VERSION")) {
            s = s.substring(s.lastIndexOf("=") + 1)
            String[] pts = s.split("\\.")

            release = pts[0]
            major = pts[1]
        }
    }
    return "$release.$major"
}

@SuppressWarnings("GroovyMissingReturnStatement")
String getModVersion(String type) {
    String major = "0"
    String revision = "0"
    String patch = "0"
    String prefix = "public static final String $type = \""
    File file = file("src/main/java/terrails/orecontroller/Constants.java")
    file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2)
            String[] pts = s.split("\\.")

            major = pts[0]
            revision = pts[1]
            patch = pts[2]
        }
    }
    return "$major.$revision.$patch"
}